(window.webpackJsonp=window.webpackJsonp||[]).push([[16],{410:function(t,s,a){"use strict";a.r(s);var n=a(2),e=Object(n.a)({},(function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h3",{attrs:{id:"简单介绍"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#简单介绍"}},[t._v("#")]),t._v(" 简单介绍")]),t._v(" "),a("div",{staticClass:"custom-block tip"},[a("p",{staticClass:"title"}),a("p",[t._v("本博客是借助Travis CI + GitHUb Pages实现持续集成以及自动部署，提交代码到仓库后travis-ci会自动构建。Travis CI目前有两个官网，分别是 "),a("a",{attrs:{href:"https://travis-ci.org",target:"_blank",rel:"noopener noreferrer"}},[t._v("travis-ci.org"),a("OutboundLink")],1),t._v(" 和 "),a("a",{attrs:{href:"https://travis-ci.com",target:"_blank",rel:"noopener noreferrer"}},[t._v("travis-ci.com"),a("OutboundLink")],1),t._v(",travis-ci.org 是旧平台，已经逐渐往新平台 travis-ci.com 上迁移了。对于私有仓库的免费自动构建，Travis CI在新平台上给予了支持。")])]),a("div",{staticClass:"language-html extra-class"},[a("pre",{pre:!0,attrs:{class:"language-html"}},[a("code",[t._v("1. Travis CI是用Ruby语言开发的一个开源的分布式持续集成服务，用于自动构建和测试在GitHub托管的项目，服务链接地址 https://travis-ci.com/，支持包括Javascript、Node.js、Ruby等20多种程序语言。对于开源项目免费提供CI服务。你也可以买他的收费版，享受更多的服务。\n\n2. Travis CI和github等代码仓库的关系：通过给travis-ci授权获取github代码仓库权限(用github账户登录该服务平台),授权后可以选择要构建的仓库（也可以选择所有仓库），之后提交代码之后会根据根目录下的travis.yml文件选择执行任务\n\n3. 实现原理，通过travis.yml执行任务, 大致执行过程如下面的伪代码命令：   (npm install -> npm build -> 进入构建好的文件夹 -> git init -> git add . -> git commit -m 'deploy'(将该目录作为ci服务平台本地仓库) -> git push 到我们专门存放博客站点的仓库,将该仓库设置为githubpage页 )\n")])])]),a("h3",{attrs:{id:"准备工作"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#准备工作"}},[t._v("#")]),t._v(" 准备工作")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("1")]),t._v(". 注册一个github账号\n "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),t._v(". 创建两个仓库。一个用来存放源码， 一个仓库存放构建编译后的代码\n "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("3")]),t._v(". 用github账号登录https://travis-ci.com平台\n "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("4")]),t._v(". 在github中创建一个GitToken，链接地址https://github.com/settings/tokens，名字可以随便取\n "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("5")]),t._v(". 将本地博客仓库进线初始化，然后在根目录添加一个 .travis.yml 文件 +  一个脚本文件 deploy.sh\n "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("6")]),t._v(". 将本地博客仓库代码上传到github源码仓库\n "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("7")]),t._v(". 存放编译构建后的代码仓库下创建一个分支 gh-pages，分支名随便取\n "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8")]),t._v(". 在travis-ci平台选择一个仓库，为其创建环境变量，最主要的是G    GitToken,用于将编译后的代码进线上传到我们的github仓库\n "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("9")]),t._v(". 设置github pages页，选择 gh-pages分支docs/\n "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("10")]),t._v(". 稍等片刻代码构建好并且上传带远程仓库之后，gitpages就可以看到效果了\n")])])]),a("h3",{attrs:{id:"travis-yml"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#travis-yml"}},[t._v("#")]),t._v(" .travis.yml")]),t._v(" "),a("div",{staticClass:"language-YAML extra-class"},[a("pre",{pre:!0,attrs:{class:"language-yaml"}},[a("code",[t._v("  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("language")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" node_js\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("node_js")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" lts/*\n  "),a("span",{pre:!0,attrs:{class:"token key atrule"}},[t._v("script")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("-")]),t._v(" bash deploy.sh\n")])])]),a("h3",{attrs:{id:"deploy-sh"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#deploy-sh"}},[t._v("#")]),t._v(" .deploy.sh")]),t._v(" "),a("div",{staticClass:"language-bash extra-class"},[a("pre",{pre:!0,attrs:{class:"language-bash"}},[a("code",[a("span",{pre:!0,attrs:{class:"token shebang important"}},[t._v("#!/usr/bin/env sh")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 确保脚本抛出遇到的错误")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("set")]),t._v(" -e\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 生成静态文件")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("npm")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("install")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("npm")]),t._v(" run build\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 进入生成的文件夹")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("cd")]),t._v(" docs/.vuepress/dist\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 进入生成的文件夹")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" init\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("add")]),t._v(" -A\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" commit -m "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'deploy'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# ${环境变量}为环境变量在travis中配置")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" push --force --quiet "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v('"https://'),a("span",{pre:!0,attrs:{class:"token variable"}},[t._v("${GH_TOKEN}")]),t._v('@github.com/xff1024/xff1024.github.io.git"')]),t._v(" master:gh-pages\n"),a("span",{pre:!0,attrs:{class:"token builtin class-name"}},[t._v("cd")]),t._v(" -\n")])])]),a("div",{staticClass:"custom-block warning"},[a("p",{staticClass:"title"}),a("p",[t._v("值得注意的是 .travis.yml 还有 .deploy.sh的书写哦哦")])])])}),[],!1,null,null,null);s.default=e.exports}}]);